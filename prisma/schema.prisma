// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid())
  name          String   @unique
  email         String   @unique
  password      String
  phone         String?
  online         Boolean @default(false)
  img           String?  @db.Text
  refresh_token String? @db.Text
  last_online   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact      Contact[]@relation("user")
  owner      Contact[]@relation("owner")
  message      Message[]
  sender     PrivateChat[]@relation("sender")
  receiver     PrivateChat[]@relation("receiver")
}

model Contact {
  id         Int     @id @default(autoincrement())
  uuid       String  @unique @default(uuid())
  user_id String
  owner_id       String 
  user    User @relation("user",fields: [user_id], references: [uuid])
  owner    User @relation("owner",fields: [owner_id], references: [uuid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupChat {
   id         Int     @id @default(autoincrement())
  uuid       String  @unique @default(uuid())
  group_name  String
  member Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message Message[]
}
model PrivateChat {
   id         Int     @id @default(autoincrement())
  uuid       String  @unique @default(uuid())
 receiver_id  String
 sender_id  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message Message[]
  sender    User     @relation("sender",fields: [sender_id], references: [uuid])
  receiver  User     @relation("receiver",fields: [receiver_id], references: [uuid])
}

model Message {
   id         Int     @id @default(autoincrement())
  uuid       String  @unique @default(uuid())
   user_id  String
  chat_id    String ?
  group_id    String ? 
  message    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupchat       GroupChat? @relation(fields: [group_id], references: [uuid])
  privatechat       PrivateChat? @relation(fields: [chat_id], references: [uuid])
  user      User @relation(fields: [user_id], references: [uuid])
}

model Otp {
id         Int     @id @default(autoincrement())
  email   String @unique
  otp  String
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



